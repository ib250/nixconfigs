  set nocompatible              " be iMproved, required
" General Leader shortcuts {
  let g:mapleader = ";"
"}
  set autoindent		" always set autoindenting on
"}
" General settings {
  " set color term to 256 colors?
  set t_Co=256
  syntax on
  set background=dark
  highlight Comment cterm=italic
  highlight Todo cterm=bold
  colorscheme desert
  " working directory always where the active buffer is located
  set autochdir
  augroup vimrc_set_working_dir
    au!
    autocmd BufEnter * silent! lcd %:p:h
  augroup end
  set ruler
  set hidden
  function! SetColor()
    hi clear
    set background=dark
    if has('gui_running')
      colorscheme desert
      set guioptions-=T
      set guioptions-=L
      set guioptions-=r
      set guifont=Source\ Code\ Pro\ for\ Powerline\ 10
      set lines=60 columns=108 linespace=0
      " distraction free and not
      nmap <leader>mm :set go=c<cr>
      nmap <leader>MM :set go=agmit<cr>
    else
      colorscheme desert
    endif
  endfunction
  call SetColor()
  set number
  set autoindent
  set expandtab
  set tabstop=2
  set shiftwidth=2
  set lazyredraw          " redraw only when we need to.
  set relativenumber
  autocmd InsertEnter * :set norelativenumber
  autocmd InsertLeave * :set relativenumber
  " Move a line of text using ALT+[jk]
  nmap <M-j> mz:m+<cr>`z
  nmap <M-k> mz:m-2<cr>`z
  vmap <M-j> :m'>+<cr>`<my`>mzgv`yo`z
  vmap <M-k> :m'<-2<cr>`>my`<mzgv`yo`z
  set scrolloff=3               " keep at least 3 lines above/below
  " Highlight every other line
   map <leader><Tab> :set hls<CR>/\n.*\n/<CR>
"}
" vim-airline and vim-powerline settings {
  set laststatus=1
"}
" Annoyance fixes {
  set visualbell 	" don't beep
  set noerrorbells 	" don't beep
  "  Accidentally hitting unwanted keys in normal mode:
  nnoremap <F1> <nop>
  " lets do the same for insert mode!
  inoremap <F1> <nop>
  "  Can't backspace past start of operation:
  set backspace=indent,eol,start
  " one less key to hit every time I want to save a file
  " reopening a file
  if has('autocmd')
    au BufReadPost * if line("'\"") > 0 && line("'\"") <= line("$")
      \| exe "normal! g'\"" | endif
  endif
  " disable continuation of comments to the next line
  " autocmd BufNewFile,BufRead * setlocal formatoptions-=cro
"}
" Editing behaviour {
  set ignorecase                  " needed for smartcase setting to work
  set smartcase                   " ignore case if search pattern is all lowercase,
  set hlsearch                    " highlight search terms
  set incsearch                   " show search matches as you type
  " makes it easy to clear out a search by typing "leader+,"
  nnoremap <leader><space> :noh<cr>
"}
" Folding rules & setting {
  set foldenable                  " enable folding
  set foldcolumn=4                " add a fold column
  set foldmethod=indent           " detect triple-{ style fold markers
  set foldnestmax=10      "deepest fold is 10 levels
  set foldenable        "dont fold by default
  set foldlevel=0
  set foldlevelstart=99
"}
" filetype & encoding {
  " Set utf8 as standard encoding and en_US as the standard language
  set encoding=utf8
  setglobal fileencoding=utf-8  " change default file encoding when writing new files
  " Use Unix as the standard file type
  set ffs=unix,mac,dos
  set ff=unix
  " File types to setup space indentation:
  augroup vimrc_file_type_indentation
    au!
    autocmd FileType python setlocal shiftwidth=4 tabstop=4 softtabstop=4 expandtab
    autocmd FileType haskell setlocal shiftwidth=4 tabstop=4 softtabstop=4 expandtab
    autocmd FileType nix setlocal shiftwidth=4 tabstop=4 softtabstop=4 expandtab
    autocmd FileType vim setlocal shiftwidth=2 tabstop=2 expandtab
    autocmd FileType matlab setlocal shiftwidth=2 tabstop=2 expandtab
  augroup end
"}
" Custom mappings and command shortcuts {
  " Fast saving
  nmap <leader>w :w!<cr>
  " Map Ctrl+Shift+l to Insert current date and time
  imap <C-S-l> <C-R>=strftime("%d/%m/%Y (%b %d) @ %H:%M")<CR>
  nmap <C-S-l> "=strftime("%d/%m/%Y (%b %d) @ %H:%M")<CR>p
  " Map jk and kj to toggle normal mode 
  " insert mode maps
  imap jk <ESC>
  imap kj <ESC>
  imap jj <ESC>0
  imap kk <ESC>0
  " command mode maps
  cmap jk <ESC>
  cmap kj <ESC>
  " visual mode maps
  vmap jk <ESC>
  vmap kj <ESC>
  " tabnew (:T)
  :command! -nargs=* T tabnew <args>
  command  W w !sudo tee > /dev/null %
  " Shortcut to toggle numbers
  nmap <leader>n :set number!<CR>
  " Shortcut to toggle window switching
  map <leader>l <C-w>
  imap <C-Return> <CR><CR><C-o>k<C-t>
  "set writebackup
  set noswapfile
  set shellslash
  " always show tab bar:
  " set showtabline=2
  " clipboard madness:
  set clipboard=unnamed
  " Menu stuff
  set wildmenu
  set wildmode=longest,full
  source $VIMRUNTIME/menu.vim
  " To stop myself using arrows
  "function! DontBeAGumme()
  "    echo "Dont Be A Gummy"
  "    echo "Use hjkl"
  "endfunction
  "" map to arrows
  "nnoremap <Up> :call DontBeAGumme() <Enter>
  "nnoremap <Down> :call DontBeAGumme() <Enter>
  "nnoremap <Left> :call DontBeAGumme() <Enter>
  "nnoremap <Right> :call DontBeAGumme() <Enter>
  " Navigate properly when lines are wrapped
  nnoremap j gj
  noremap k gk
  " show commands
  set showcmd
  nnoremap <leader>bn :bNext<Enter>
  nnoremap <leader>bd :bdelete<Enter>
  nnoremap <leader>e :enew<Enter>
  nnoremap Q <Esc>
  nnoremap <leader>q :q<Enter>
  nnoremap <leader>Q :q!<Enter>
  inoremap <leader><Tab> <C-x><C-f>
  set completeopt=menuone,menu,longest,preview
  " sorry :(
  nnoremap <leader>p :emenu Edit.Paste<CR>
  inoremap <leader><tab> <c-x><c-i>
  "set nocp | sy on \
  "let g:SuperTabDefaultCompletionType = <c-x><c-u> \
  "set completefunc=TestSuperTabCodeComplete \
  "call SuperTabChain(&completefunc, '<c-p>')
  nnoremap <leader>ip :!ipython -i %<CR>
  nnoremap <leader>rp :!python %<CR>
"} Ctrl P{
  set wildignore+=*/tmp/*,*.so,*.swp,*.zip     " MacOSX/Linux
  " ctrlp extensions:
  " CtrlP for filetype
  let g:ctrlp_extensions = ['filetype']
   "silent! nnoremap <unique> <silent> <Leader>f :CtrlPFiletype<CR>
  " Faster searching if 'ag' present
  " The Silver Searcher
  if executable('ag')
    " Use ag over grep
    set grepprg=ag\ --nogroup\ --nocolor
    " Use ag in CtrlP for listing files. Lightning fast and respects .gitignore
    let g:ctrlp_user_command = 'ag %s -l --nocolor --hidden -g ""'
    " ag is fast enough that CtrlP doesn't need to cache
    let g:ctrlp_use_caching = 0
  endif
  " by default <c-p> command open in MRU mode
  let g:ctrlp_cmd = 'CtrlPMRU'
" }
  autocmd FileType haskell vnoremap <buffer> <silent> <Leader>pf :PointFree!<CR>
  nnoremap <C-n> :NERDTreeToggle<CR>
